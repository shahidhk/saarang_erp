{"ts":1375403057282,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# From django\nfrom django.db import models\nfrom django.conf import settings\nfrom django.contrib.auth.models import User, Group\nfrom django.utils.translation import ugettext_lazy as _\n\n# Model for Department forum\nclass Forum(models.Model):\n    '''\n        Defines the Forum class ie. the department Forums\n    '''\n    title = models.CharField(max_length=60,unique=True) # Title,\n    department=models.CharField(max_length=60,choices=settings.DEPARTMENTS)\n    #position = models.IntegerField('Position', blank=True, default=0) #Defines the position of the forum\n    post_count = models.IntegerField(blank=True, default=0) # No of posts in the Forum\n    topic_count = models.IntegerField(blank=True, default=0) # No of topics under the forum\n    last_post = models.ForeignKey('Post', related_name='last_forum_post', blank=True, null=True) # Latest post\n\n    class Meta:\n        verbose_name = _('Department Forum')\n        verbose_name_plural = _('Forums')\n\n    def __unicode__(self):\n        return self.title\n\n    @models.permalink\n    def get_absolute_url(self):\n        return ('erp:forum',[self.id])\n\n    @property\n    def posts(self):\n        return Post.objects.filter(topic__forum__id=self.id).select_related()\n\n# Defines the Topic, which is like  a thread under each forum\nclass Topic(models.Model):\n    forum = models.ForeignKey(Forum, related_name='topics', verbose_name='Forum') # Key that indicates to the parent forum\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(null=True, blank=True)\n    creator = models.ForeignKey(User) # Key pointing to the user who created the topic\n    views = models.IntegerField(blank=True, default=0) # Counts the number of views (not implemented)\n    closed = models.BooleanField(blank=True, default=False) # Determines whethe the task is done or not (not implemented)\n    usertags=models.ManyToManyField(User, related_name='topic_usertags', blank=True) # points to the users tagged, that way it can be directly shown in the user homepage (not implemented yet)\n    iswork = models.BooleanField(default=False, verbose_name=\"Work\") # Check if the topic is regarding a work or not\n    post_count = models.IntegerField(blank=True, default=0) # Counts the posts in the topic\n    last_post = models.ForeignKey('Post', related_name='last_topic_post', blank=True, null=True, default='') # Points to the last post\n\n    class Meta:\n        ordering = ['-updated']\n        get_latest_by = 'created'\n        verbose_name = _('Topic')\n        verbose_name_plural = _('Topics')\n\n    def __unicode__(self):\n        return self.title\n\n    @property\n    def head(self):\n        try:\n            return self.posts.select_related().order_by('created')[0]\n        except IndexError:\n            return None\n\n    @property\n    def reply_count(self):\n        return self.post_count - 1\n\n    @models.permalink\n    def get_absolute_url(self):\n        return ('erp:topic',[self.id])\n\n# Defines the posts, ie replies in a topic\nclass Post(models.Model):\n    title = models.CharField(max_length=60)\n    created = models.DateTimeField(auto_now_add=True)\n    user = models.ForeignKey(User, related_name='posts', verbose_name='User') # Points to the user who created it\n    topic = models.ForeignKey(Topic, related_name='posts')# Point to the parent topic\n    updated = models.DateTimeField('Updated', blank=True, null=True) # Not implemented\n    updated_by = models.ForeignKey(User, verbose_name='Updated by', blank=True, null=True)\n    description = models.TextField(blank=True, default='') # The matter of post\n\n    # TODO: Add options for attaching files\n\n    class Meta:\n        ordering = ['created']\n        get_latest_by = 'created'\n        verbose_name = _('Post')\n        verbose_name_plural = _('Posts')\n\n    def __unicode__(self):\n        return self.title\n\n    #def save(self):\n    #    pass\n\n    #Delete post?\n\n    @models.permalink\n    def get_absolute_url(self):\n        return ('erp:post',[self.id])\n\n    # Returns a short summary of the post, 50 characters from description\n    def summary(self):\n        LIMIT = 50\n        tail = len(self.description) > LIMIT and '...' or ''\n        return self.description[:LIMIT] + tail\n\n    __unicode__ = summary    "]],"start1":0,"start2":0,"length1":0,"length2":4271}]],"length":4271}
